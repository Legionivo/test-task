plugins {
    id 'java'
    id 'io.qameta.allure' version '2.11.2'
}

group 'com.github.legionivo'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url("https://plugins.gradle.org/m2/") }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.add('-parameters')
}

ext {
    allureVersion = '2.25.0'
    junitVersion = '5.10.2'
    restAssuredVersion = '5.4.0'
    aspectjVersion = '1.9.21'
    selenideVersion = '7.2.1' //7.2.1
    lombokVersion = '1.18.20'
}

dependencies {
    implementation("com.codeborne:selenide:${selenideVersion}")
    testImplementation platform("io.qameta.allure:allure-bom:${allureVersion}")
    testImplementation("io.qameta.allure:allure-selenide:${allureVersion}")
    implementation("io.qameta.allure:allure-java-commons:${allureVersion}")
    testImplementation("io.qameta.allure:allure-junit5:${allureVersion}")
    testImplementation("io.qameta.allure:allure-junit5-assert:${allureVersion}")
    implementation("io.qameta.allure:allure-rest-assured:${allureVersion}")
    implementation("io.rest-assured:rest-assured:${restAssuredVersion}")
    testImplementation('org.slf4j:slf4j-simple:2.0.6')
    implementation("org.aeonbits.owner:owner:1.0.12")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
    implementation("org.apache.commons:commons-compress:1.26.1")
    implementation("com.github.javafaker:javafaker:1.0.2")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.17.0")
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation "org.projectlombok:lombok:${lombokVersion}"
    testImplementation "org.aspectj:aspectjweaver:${aspectjVersion}"
}

test {
    testLogging {
        showStandardStreams = true
        testLogging.exceptionFormat = "full"
        testLogging.showStackTraces = true
        testLogging.showExceptions = true
        testLogging.showCauses = false
        events "PASSED", "FAILED", "SKIPPED"
    }
    useJUnitPlatform() {
        if (System.getProperty("tags") != null) {
            includeTags = System.getProperty("tags").split(",") //gradle test -Dtags=smoke
        }

        if (System.getProperty("excludetags") != null) {
            excludeTags = System.getProperty("excludetags").split(",") //gradle test -Dexcludetags=smoke or -Dexcludetags=api,smoke,regression
        }
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            def output = "Results: ${result.resultType} (${result.testCount} tests: ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            def startItem = "|  ", endItem = "  |"
            def repeatLength = startItem.length() + output.length() + endItem.length()
            println("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
        }
    }
}
allure {
    aspectjweaver = true
    version = "${allureVersion}"
}
